{"version":3,"sources":["app.js"],"names":[],"mappingsfile":"injam.samples.js","sourcesContent":["var injamSdk = require('injam-sdk')\n\n\n\nwindow.markers = []\n\n\n\n// Put your physical id and application key\n\nwindow.credentials = {\n    physical_id: 'demolx85b',\n    channels: [],\n    application_key: 'd144dd40-f7ad-11e7-9660-61d5f7592493'\n}\n\n\n\n// Some locations\n\nwindow.Asia = {\n    lat: 23.800029,\n    lng: 62.4289998\n}\n\nwindow.Iran = {\n    lat: 31.9927359,\n    lng: 44.6737631\n}\n\nwindow.Tehran = {\n    lat: 35.6970118,\n    lng: 51.2097338\n}\n\n\n\n// Google Maps Sample\n\nwindow.connectForGoogleMaps = function() {\n\n    // Connect to Injam\n\n    window.injam = new Injam(credentials)\n    injam.connect()\n\n    injam.on('subscribed', function (channel) {\n        M.toast({html: 'Subscribed ' + channel})\n    })\n\n    injam.on('unsubscribed', function (channel) {\n        M.toast({html: 'Unsubscribed ' + channel})\n    })\n\n\n    // Showing devices on Google Maps by markers when receiving location data\n\n    injam.on('tracking', function (data) {\n        if (markers[data.channel]) {\n            var latlng = new google.maps.LatLng(data.location.lat, data.location.lng)\n            markers[data.channel].setPosition(latlng)\n            // Uncomment below if you want lock to one marker\n            // map.panTo(latlng)\n        } else {\n            addMarkerGMaps(data.channel, {lat: data.location.lat, lng: data.location.lng}, map)\n            var latlng = new google.maps.LatLng(data.location.lat, data.location.lng)\n            markers[data.channel].setPosition(latlng)\n            map.panTo(latlng)\n        }\n    })\n\n\n    // Google Map init\n\n    window.map = new google.maps.Map(document.getElementById('map'), {\n        zoom: 3,\n        center: Asia,\n        scrollwheel: false,\n        navigationControl: false,\n        mapTypeControl: false,\n        scaleControl: false,\n        fullscreenControl: true,\n        streetViewControl: false\n    })\n\n}\n\n\n\n// Most useful Google Maps functions\n\nwindow.addMarkerGMaps = function(id, location, map) {\n    markers[id] = new google.maps.Marker({\n        map: map,\n        animation: google.maps.Animation.DROP,\n        position: location,\n        title: id\n    })\n}\n\nwindow.setMapOnAllGMaps = function(map) {\n    for (var i = 0; i < window.Markers.length; i++) {\n        markers[i].setMap(map)\n    }\n}\n\nwindow.clearMarkersGMaps = function() {\n    setMapOnAllGMaps(null)\n}\n\nwindow.deleteMarkersGMaps = function() {\n    clearMarkersGMaps()\n    markers = []\n}\n\n\n\n// Open Street Map Sample\n\nwindow.connectForOpenStreetMap = function() {\n\n    // Connect to Injam\n\n    window.injam = new Injam(credentials)\n    injam.connect()\n\n    injam.on('subscribed', function (channel) {\n        M.toast({html: 'Subscribed ' + channel})\n    })\n\n    injam.on('unsubscribed', function (channel) {\n        M.toast({html: 'Unsubscribed ' + channel})\n    })\n\n\n    // Showing devices on Open Street Map by markers when receiving location data\n\n    injam.on('tracking', function (data) {\n        if (markers[data.channel]) {\n            var lonLat = ol.proj.transform([data.location.lng, data.location.lat], 'EPSG:4326', 'EPSG:3857')\n            markers[data.channel].setCoordinates(lonLat)\n            // Uncomment below if you want lock to one marker\n            // view.animate({\n            //     center: lonLat,\n            //     duration: 2000\n            // })\n        } else {\n            addMarkerOSM(data.channel, {lat: data.location.lat, lng: data.location.lng})\n            var lonLat = ol.proj.transform([data.location.lng, data.location.lat], 'EPSG:4326', 'EPSG:3857')\n            view.animate({\n                center: lonLat,\n                duration: 2000\n            })\n        }\n    })\n\n\n    // Open Street Map init\n\n    window.markerSource = new ol.source.Vector()\n    window.markerStyle = new ol.style.Style({\n        image: new ol.style.Icon(/** @type {olx.style.IconOptions} */ ({\n            anchor: [0.5, 46],\n            anchorXUnits: 'fraction',\n            anchorYUnits: 'pixels',\n            src: 'https://injam.io/images/Marker-Red.svg'\n        }))\n    })\n    window.view = new ol.View({\n        center: ol.proj.fromLonLat([Asia.lng, Asia.lat]),\n        zoom: 3\n    })\n\n    window.map = new ol.Map({\n        target: 'map',\n        layers: [\n          new ol.layer.Tile({\n            source: new ol.source.OSM()\n          }),\n          new ol.layer.Vector({\n            source: markerSource,\n            style: markerStyle\n          }),\n        ],\n        view: view\n    })\n\n}\n\n\n// Most useful Open Street Map functions\n\nwindow.addMarkerOSM = function(id, location) {\n    markers[id] = new ol.geom.Point(ol.proj.transform([location.lng, location.lat], 'EPSG:4326', 'EPSG:3857'))\n    var marker = new ol.Feature({\n        geometry: markers[id],\n        name: id\n    })\n    markerSource.addFeature(marker)\n}\n\n\n\n// Cedar Maps Sample\n\nwindow.connectForCedarMaps = function() {\n\n    // Connect to Injam\n\n    window.injam = new Injam(credentials)\n    injam.connect()\n\n    injam.on('subscribed', function (channel) {\n        M.toast({html: 'Subscribed ' + channel})\n    })\n\n    injam.on('unsubscribed', function (channel) {\n        M.toast({html: 'Unsubscribed ' + channel})\n    })\n\n\n    // Showing devices on Cedar Maps by markers when receiving location data\n\n    injam.on('tracking', function (data) {\n        if (markers[data.channel]) {\n            var latLng = L.latLng(data.location)\n            markers[data.channel].setLatLng(latLng)\n            // Uncomment below if you want lock to one marker\n            // map.setView(data.location)\n        } else {\n            addMarkerCM(data.channel, {lat: data.location.lat, lng: data.location.lng})\n            map.setView(data.location)\n        }\n    })\n\n\n    // Cedar Maps init\n\n    var cmOptions = {\n        center: {lat: Tehran.lat, lng: Tehran.lng},\n        scrollWheelZoom :false,\n        zoomControl: true,\n        zoom: 7,\n        minZoom: 6,\n        maxZoom: 17,\n        legendControl: false,\n        attributionControl: false\n    }\n    window.map = L.cedarmaps.map('map', 'https://api.cedarmaps.com/v1/tiles/cedarmaps.streets.json?access_token=8b5bc03a7ce664a403940ee68357e7c44240609e', cmOptions)\n\n}\n\n\n// Most useful Cedar Maps functions\n\nwindow.addMarkerCM = function(id, location) {\n    var markerOptions = {\n        center: {lat: location.lat, lng: location.lng},\n        iconOpts: {\n            iconUrl: \"https://injam.io/images/Marker-Red.svg\",\n            iconRetinaUrl: \"https://injam.io/images/Marker-Red.svg\",\n            iconSize: [32, 44]\n        }\n    }\n    var iconOptions = {\n        iconUrl: markerOptions.iconOpts.iconUrl,\n        iconRetinaUrl: markerOptions.iconOpts.iconRetinaUrl,\n        iconSize: markerOptions.iconOpts.iconSize\n    }\n    var markerIcon = {\n        icon: L.icon(iconOptions)\n    }\n    var marker = new L.marker(markerOptions.center, markerIcon)\n    marker.addTo(map)\n    markers[id] = marker\n}\n\n\n\n// Messaging Sample\n\nwindow.connectForMessaging = function() {\n\n    // Connect to Injam\n\n    window.injam = new Injam(credentials)\n    injam.connect()\n\n    injam.on('subscribed', function (channel) {\n        M.toast({html: 'Subscribed ' + channel})\n    })\n\n    injam.on('unsubscribed', function (channel) {\n        M.toast({html: 'Unsubscribed ' + channel})\n    })\n\n    injam.on('rawData', function (data) {\n        addMessage(data)\n    })\n\n}\n\nif ($('#board').length) {\n    connectForMessaging()\n}\n\n\n\nwindow.addMessage = function(data) {\n    var name = data.channel || credentials.physical_id\n    var message = data.data || data.message || data.body\n    $('#board .messages').prepend('<div class=\"message-holder\"><div class=\"message\">'\n        + '<span class=\"title\">' + name + '</span>'\n        + '<p class=\"body\">' + message + '</p>'\n    + '</div></div>')\n}\n\n\n\n// Subscribe\n\n$('.sub').on('click', function(e) {\n    e.preventDefault()\n    var channel = $('#subscription').val()\n    if (channel != '')\n        injam.subscribe(channel)\n})\n\n\n\n// Unsubscribe\n\n$('.unsub').on('click', function(e) {\n    e.preventDefault()\n    var channel = $('#subscription').val()\n    if (channel != '')\n        injam.unsubscribe(channel)\n})\n\n\n\n// Send Data\n\n$('.send').on('click', function(e) {\n    e.preventDefault()\n    var data = {message: $('#data').val()}\n    if (data.message != '') {\n        injam.publish(data)\n        addMessage(data)\n    }\n})"]}